pragma language_version >= 0.13.0;

import CompactStandardLibrary;

export { CoinInfo };

export ledger counter: Counter;
export ledger nonce: Bytes<32>;
export ledger tvl: Uint<64>;

constructor(initNonce: Bytes<32>) {
  nonce = disclose(initNonce);
}

export circuit mint(): [] {
  counter.increment(1);
  const newNonce = evolveNonce(counter, nonce);
  const amount = 1;
  tvl = tvl + amount as Uint<64>;
  mintToken(pad(32, "midnames"), amount, newNonce, left<ZswapCoinPublicKey, ContractAddress>(ownPublicKey()));
  nonce = newNonce;
}

export circuit mint_for(addr: ZswapCoinPublicKey): [] {
  counter.increment(1);
  const newNonce = evolveNonce(counter, nonce);
  const amount = 1;
  tvl = tvl + amount as Uint<64>;
  mintToken(pad(32, "midnames"), amount, newNonce, left<ZswapCoinPublicKey, ContractAddress>(disclose(addr)));
  nonce = newNonce;
}